######################## IMPORTS ########################
import dataclasses
import re
from enum import Enum

from ecom.datatypes import TypeInfo

# ------------------- PyQt Modules -------------------- #
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

from sources.common.widgets.Widgets import ValueWidget, TypeSelector
# --------------------- Sources ----------------------- #
from sources.common.widgets.Widgets import SquareIconButton, ValueWidget, SquareIconButton, TypeSelector
from sources.databases.balloondata import BalloonPackageDatabase, serializeTypedValue
from ecom.datatypes import TypeInfo, StructType, EnumType, ArrayType, DynamicSizeError


######################## CLASSES ########################
class SharedTypesEditorWidget(QWidget):
    change = pyqtSignal()

    def __init__(self, database):
        super().__init__()
        self.editor = None
        self.database = database
        self.currentDataType, self.editor = None, None
        self.baseTypesValues = [baseType.value for baseType in TypeInfo.BaseType]
        self.baseTypeNames = [baseType.name for baseType in TypeInfo.BaseType]

        # DATATYPES TABLE
        self.table = QTableWidget()
        self.table.setColumnCount(3)  # Added a new column for 'Edit' buttons
        self.table.setHorizontalHeaderLabels(['Shared Type', 'Category', 'Edit'])
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.cellClicked.connect(self.editTypeClicked)

        # STACKED WIDGET
        self.stackWidget = QStackedWidget()
        self.stackWidget.addWidget(self.table)

        # MAIN LAYOUT
        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.stackWidget)
        self.setLayout(mainLayout)
        self.populateDataTypes()

    def populateDataTypes(self):
        autogeneratedTypes = ['ConfigurationId', 'Configuration', 'TelecommandType', 'TelemetryType', ]
        originalTypes = ['TelecommandMessageHeader', 'TelemetryMessageHeader']
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(['Data Types', 'Category', 'Edit'])
        for name, typInfo in self.database.dataTypes.items():
            if name not in autogeneratedTypes and name not in originalTypes:
                rowPosition = self.table.rowCount()
                self.table.setRowCount(rowPosition + 1)
                itemName = QTableWidgetItem(name)
                self.table.setItem(rowPosition, 0, itemName)
                category = self.getDataTypeCategory(typInfo)
                itemCategory = QTableWidgetItem(category)
                self.table.setItem(rowPosition, 1, itemCategory)
                if category not in ['Simple', 'Array']:
                    editButton = QPushButton('Edit')
                    editButton.clicked.connect(self.editTypeClicked)
                    self.table.setCellWidget(rowPosition, 2, editButton)

    @staticmethod
    def getDataTypeCategory(typeInfo):
        if issubclass(typeInfo.type, Enum):
            return 'Enum'
        elif issubclass(typeInfo.type, StructType):
            return 'Structure'
        elif issubclass(typeInfo.type, ArrayType):
            return 'Array'
        elif typeInfo.description is None:
            return 'Simple'
        else:
            return 'Advanced'

    def editTypeClicked(self):
        senderWidget = self.sender()
        if isinstance(senderWidget, QPushButton):
            row = self.table.indexAt(senderWidget.pos()).row()
            category = self.table.item(row, 1).text()
            editorContainer = QWidget()
            editorLayout = QVBoxLayout(editorContainer)
            goBackButton = QPushButton('Go Back', editorContainer)
            goBackButton.clicked.connect(self.goBackToTable)
            if category == 'Enum':
                self.editor = EnumEditorWidget(self.database, self.table.item(row, 0).text())
            elif category == 'Structure':
                self.editor = StructureEditorWidget(self.database, self.table.item(row, 0).text())
            editorLayout.addWidget(goBackButton)
            editorLayout.addWidget(self.editor)
            self.stackWidget.addWidget(editorContainer)
            self.stackWidget.setCurrentWidget(editorContainer)
            self.stackWidget.show()

    def goBackToTable(self):
        self.stackWidget.setCurrentIndex(0)


class EnumEditorWidget(QWidget):
    def __init__(self, database, dataType):
        super().__init__()
        # UI ELEMENTS
        self.database, self.dataTypeName = database, dataType
        self.dataTypeNameEdit = QLineEdit(self.dataTypeName)
        self.valuesTableWidget = QTableWidget()
        self.valuesTableWidget.setColumnCount(3)
        self.valuesTableWidget.setHorizontalHeaderLabels(['Name', 'Value', 'Description'])
        self.valuesTableWidget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.valuesTableWidget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.valuesTableWidget.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)
        self.valuesTableWidget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.addValueButton = QPushButton('Add Value')
        self.addValueButton.clicked.connect(self.addEnumValue)
        self.populateValues()

        # MAIN LAYOUT
        layout = QVBoxLayout(self)
        layout.addWidget(self.dataTypeNameEdit)
        layout.addWidget(self.valuesTableWidget)
        layout.addWidget(self.addValueButton)

    def populateValues(self):
        enumTypeInfo = self.database.getTypeInfo(self.dataTypeName)
        enumValues = enumTypeInfo.type.__members__
        self.valuesTableWidget.setRowCount(len(enumValues))
        for row, (name, value) in enumerate(enumValues.items()):
            nameItem = QTableWidgetItem(name)
            self.valuesTableWidget.setItem(row, 0, nameItem)
            valueItem = QLineEdit(str(value.value))
            if enumTypeInfo.baseTypeName and enumTypeInfo.baseTypeName in enumTypeInfo.type._value2member_map_:
                baseTypeValue = enumTypeInfo.type._value2member_map_[enumTypeInfo.baseTypeName].value
                if isinstance(value.value, baseTypeValue):
                    valueItem.setText(str(value.value))
            self.valuesTableWidget.setCellWidget(row, 1, valueItem)
            descriptionItem = QTableWidgetItem(value.__doc__ if value.__doc__ else '')
            self.valuesTableWidget.setItem(row, 2, descriptionItem)
        self.valuesTableWidget.resizeColumnsToContents()

    def addEnumValue(self):
        pass


class StructureEditorWidget(QWidget):
    def __init__(self, database, dataType):
        super().__init__()
        self.database = database
        self.data_type_name = dataType
        self.setWindowTitle(f'Edit Structure: {dataType}')
        label = QLabel('Structure Editor')
        layout = QVBoxLayout()
        layout.addWidget(label)
        self.setLayout(layout)